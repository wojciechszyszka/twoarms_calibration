<?xml version="1.0" ?>
<launch>

    <!-- Setting calibration namespace -->
    <arg name="eye_on_hand" doc="if true, eye-on-hand instead of eye-on-base" />
    <arg name="namespace_prefix" default="easy_handeye" doc="the prefix of the namespace the node will run in, and of the folder in which the result will be saved" />
    <arg if="$(arg eye_on_hand)" name="namespace" value="$(arg namespace_prefix)_eye_on_hand" doc="the namespace the node will run in, and the folder in which the result will be saved" />
    <arg unless="$(arg eye_on_hand)" name="namespace" value="$(arg namespace_prefix)_eye_on_base" doc="the namespace the node will run in, and the folder in which the result will be saved" />

    <!-- Automatic robot movements -->
    <arg name="freehand_robot_movement" default="false" doc="if false, the rqt plugin for the automatic robot motion with MoveIt! will be started" />
    <arg name="move_group_namespace" default="/"  doc="the namespace of move_group for the automatic robot motion with MoveIt!" />
    <arg name="move_group" default="manipulator"  doc="the name of move_group for the automatic robot motion with MoveIt!" />

    <arg name="translation_delta_meters" default="0.1" doc="the maximum movement that the robot should perform in the translation phase" />
    <arg name="rotation_delta_degrees" default="25" doc="the maximum rotation that the robot should perform" />
    <arg name="robot_velocity_scaling" default="0.3" doc="the maximum speed the robot should reach, as a factor of the speed declared in the joint_limits.yaml" />
    <arg name="robot_acceleration_scaling" default="0.2" doc="the maximum acceleration the robot should reach, as a factor of the acceleration declared in the joint_limits.yaml" />

    <!-- The input reference frames -->
    <arg name="robot_base_frame" default="base_link" />
    <arg name="robot_effector_frame" default="tool0" />
    <arg name="tracking_base_frame" default="tracking_origin" />
    <arg name="tracking_marker_frame" default="tracking_target" />
    
    <!-- Publish dummy frames while calibrating -->
    <arg name="publish_dummy" default="true" doc="if true, a dummy calibration will be published to keep all frames in a single tf tree, hence visualized in RViz" />
    
    <!-- Dummy calibration to have a fully connected tf tree and see all frames -->
    <group if="$(arg publish_dummy)">
        <node unless="$(arg eye_on_hand)" name="dummy_handeye" pkg="tf" type="static_transform_publisher"
            args="1 1 1 0 1.5 0 $(arg robot_base_frame) $(arg tracking_base_frame) 10" />
        <node if="$(arg eye_on_hand)" name="dummy_handeye" pkg="tf" type="static_transform_publisher"
            args="0 0 0.05 0 0 0 $(arg robot_effector_frame) $(arg tracking_base_frame) 10" />
    </group>


    <!-- Start the robot backend outside the namespace, so that it can connect to a MoveGroup in the global namespace -->
    <!-- see https://github.com/ros-planning/moveit/issues/2364 -->
    <node unless="$(arg freehand_robot_movement)" name="$(arg namespace)_easy_handeye_calibration_server_robot"
          pkg="easy_handeye"
          type="robot.py"
          output="screen" >
        <param name="calibration_namespace" value="$(arg namespace)" />
    </node>

    <group ns="$(arg namespace)">

        <!-- Store the parameters in the calibration's namespace-->
        <param name="eye_on_hand" value="$(arg eye_on_hand)"/>
        <param name="move_group_namespace" value="$(arg move_group_namespace)"/>
        <param name="move_group" value="$(arg move_group)"/>
        <param name="robot_base_frame" value="$(arg robot_base_frame)" />
        <param name="robot_effector_frame" value="$(arg robot_effector_frame)" />
        <param name="tracking_base_frame" value="$(arg tracking_base_frame)" />
        <param name="tracking_marker_frame" value="$(arg tracking_marker_frame)" />

        <!-- Start the backend -->
        <node name="easy_handeye_calibration_server"
              pkg="easy_handeye"
              type="calibrate.py"
              output="screen" />

        <!-- Start the node for automatic calibration -->
        <node name="automatic_movements" 
              pkg="automatic_movement" 
              type="auto_movement.py" 
              output="screen" 
              respawn="false" />

    </group>

</launch>
